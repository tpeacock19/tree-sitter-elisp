================================================================================
String literals
================================================================================


""
"simple"
"\""
"\\"
"\\ foo \\"
"\N{LATIN SMALL LETTER A WITH GRAVE} one two"
"\xe0\ "
"\xe0\ \C-\101 one"
"\121 one two"

"
multiline
"

"\
foo"

(defun foo ()
  "using `lexical-binding' again. ")

(replace-regexp-in-string "\\`[(]\\|[)]\\'" "" x)

(string-match "\\`([^ )]+ ?" str)


(string-match "\\`\\*" doc)




--------------------------------------------------------------------------------

(source
 (string)
 (string
  (string_fragment))
 (string
  (escape_sequence))
 (string
  (escape_sequence))
 (string
  (escape_sequence)
  (string_fragment)
  (escape_sequence))
 (string
  (escape_sequence (unicode_name_esc))
  (string_fragment))
 (string (escape_sequence (hex_esc)))
 (string
  (escape_sequence (hex_esc))
  (escape_sequence (keybind_esc))
  (string_fragment))
 (string
  (escape_sequence (octal_esc))
  (string_fragment))
 (string
  (string_fragment))
 (string
  (escape_sequence)
  (string_fragment))
 (function_definition
  (defun_header (symbol)
    (symbol)
    (list))
  (string
   (string_fragment)
   (lisp_code)
   (string_fragment)))
 (list
  (cons (symbol)
        (cons (string (escape_sequence) (lisp_code))
              (cons (string)
                    (cons (symbol))))))
 (list
  (cons (symbol)
        (cons (string (escape_sequence) (string_fragment))
              (cons (symbol)))))
 (list
  (cons (symbol)
        (cons (string (escape_sequence)
                      (string_fragment)
                      (escape_sequence)
                      (string_fragment))
              (cons (symbol))))))
